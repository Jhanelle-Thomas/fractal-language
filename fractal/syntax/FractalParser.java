
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 06 12:32:31 EST 2017
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.FractalValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 06 12:32:31 EST 2017
  */
public class FractalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\012\000\002\004\012\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\012\000\002\004\007\000\002\004\003\000\002\005" +
    "\011\000\002\006\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\015\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\036\022\015\023\013\024\021\025\025\026" +
    "\012\027\017\030\006\031\007\040\014\041\004\042\011" +
    "\043\022\045\016\046\005\001\002\000\042\002\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\001\002\000\014\005\033\007\116\047\035" +
    "\050\027\051\026\001\002\000\044\002\uffea\005\114\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\001\002\000\044\002\uffe9\005\112\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\001\002\000\004\002\111\001\002\000\042\002" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\001\002\000\044\002\uffec\005\107" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\001\002\000\012\005\033\047\035\050" +
    "\027\051\026\001\002\000\006\005\071\007\070\001\002" +
    "\000\012\005\033\047\035\050\027\051\026\001\002\000" +
    "\004\051\056\001\002\000\044\002\uffeb\005\054\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\001\002\000\042\002\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\012\005\033\047\035\050\027\051\026\001\002" +
    "\000\042\002\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\001\002\000\042\002" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\001\002\000\040\002\001\022\015" +
    "\023\013\024\021\025\025\026\012\027\017\030\006\031" +
    "\007\040\014\041\004\042\011\043\022\045\016\046\005" +
    "\001\002\000\012\005\033\047\035\050\027\051\026\001" +
    "\002\000\062\002\uffda\006\uffda\010\uffda\012\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\001" +
    "\002\000\062\002\uffd7\006\uffd7\010\uffd7\012\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\001" +
    "\002\000\062\002\uffe0\006\uffe0\010\uffe0\012\uffe0\015\uffe0" +
    "\016\uffe0\017\042\020\043\021\041\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\001" +
    "\002\000\062\002\uffdc\006\uffdc\010\uffdc\012\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001" +
    "\002\000\062\002\uffdb\006\uffdb\010\uffdb\012\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\012\005\033\047\035\050\027\051\026\001\002" +
    "\000\046\002\uffed\015\036\016\037\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\001" +
    "\002\000\062\002\uffd8\006\uffd8\010\uffd8\012\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\001" +
    "\002\000\012\005\033\047\035\050\027\051\026\001\002" +
    "\000\012\005\033\047\035\050\027\051\026\001\002\000" +
    "\062\002\uffe1\006\uffe1\010\uffe1\012\uffe1\015\uffe1\016\uffe1" +
    "\017\042\020\043\021\041\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000" +
    "\012\005\033\047\035\050\027\051\026\001\002\000\012" +
    "\005\033\047\035\050\027\051\026\001\002\000\012\005" +
    "\033\047\035\050\027\051\026\001\002\000\062\002\uffde" +
    "\006\uffde\010\uffde\012\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\001\002\000\062\002\uffdf" +
    "\006\uffdf\010\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002\000\062\002\uffdd" +
    "\006\uffdd\010\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000\062\002\uffe2" +
    "\006\uffe2\010\uffe2\012\uffe2\015\uffe2\016\uffe2\017\042\020" +
    "\043\021\041\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\010\006\051" +
    "\015\036\016\037\001\002\000\062\002\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\001\002\000\042\002\uffff\022\uffff\023" +
    "\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\001\002\000\046\002\uffee\015\036\016\037\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\001\002\000\004\006\055\001\002\000\042\002" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\001\002\000\004\004\057\001\002" +
    "\000\004\005\061\001\002\000\042\002\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\001\002\000\012\005\033\047\035\050\027\051\026" +
    "\001\002\000\010\006\063\015\036\016\037\001\002\000" +
    "\004\012\064\001\002\000\036\022\015\023\013\024\021" +
    "\025\025\026\012\027\017\030\006\031\007\040\014\041" +
    "\004\042\011\043\022\045\016\046\005\001\002\000\040" +
    "\022\015\023\013\024\021\025\025\026\012\027\017\030" +
    "\006\031\007\040\014\041\004\042\011\043\022\044\066" +
    "\045\016\046\005\001\002\000\042\002\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\001\002\000\046\002\ufff0\015\036\016\037\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\001\002\000\012\005\033\047\035\050\027\051" +
    "\026\001\002\000\012\005\033\047\035\050\027\051\026" +
    "\001\002\000\010\006\073\015\036\016\037\001\002\000" +
    "\006\004\057\051\074\001\002\000\042\002\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\001\002\000\042\002\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\001" +
    "\002\000\042\002\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\010" +
    "\010\100\015\036\016\037\001\002\000\004\005\101\001" +
    "\002\000\012\005\033\047\035\050\027\051\026\001\002" +
    "\000\010\006\103\015\036\016\037\001\002\000\006\004" +
    "\057\051\074\001\002\000\042\002\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa" +
    "\001\002\000\042\002\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\001\002\000" +
    "\046\002\uffef\015\036\016\037\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\001\002" +
    "\000\004\006\110\001\002\000\042\002\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\001\002\000\004\002\000\001\002\000\004\006\113" +
    "\001\002\000\042\002\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\001\002\000" +
    "\004\006\115\001\002\000\042\002\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\001\002\000\004\051\123\001\002\000\010\012\120\015" +
    "\036\016\037\001\002\000\036\022\015\023\013\024\021" +
    "\025\025\026\012\027\017\030\006\031\007\040\014\041" +
    "\004\042\011\043\022\045\016\046\005\001\002\000\040" +
    "\022\015\023\013\024\021\025\025\026\012\027\017\030" +
    "\006\031\007\040\014\041\004\042\011\043\022\044\122" +
    "\045\016\046\005\001\002\000\042\002\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\001\002\000\004\010\124\001\002\000\012\005\033" +
    "\047\035\050\027\051\026\001\002\000\010\012\126\015" +
    "\036\016\037\001\002\000\036\022\015\023\013\024\021" +
    "\025\025\026\012\027\017\030\006\031\007\040\014\041" +
    "\004\042\011\043\022\045\016\046\005\001\002\000\040" +
    "\022\015\023\013\024\021\025\025\026\012\027\017\030" +
    "\006\031\007\040\014\041\004\042\011\043\022\044\130" +
    "\045\016\046\005\001\002\000\042\002\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\012\002\007\003\023\004\022\007\017\001" +
    "\001\000\002\001\001\000\012\011\116\012\027\013\030" +
    "\014\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\105\012\027\013\030\014\031\001\001\000\002\001" +
    "\001\000\012\011\066\012\027\013\030\014\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\052\012\027\013\030\014\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\051\007\017\001" +
    "\001\000\012\011\033\012\027\013\030\014\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\047\012\027" +
    "\013\030\014\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\046\013\030\014\031\001\001\000\010" +
    "\012\037\013\030\014\031\001\001\000\002\001\001\000" +
    "\006\013\045\014\031\001\001\000\006\013\044\014\031" +
    "\001\001\000\006\013\043\014\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\061\012\027\013\030\014\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\064\004\022\007" +
    "\017\001\001\000\006\004\051\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\076\012\027\013" +
    "\030\014\031\001\001\000\012\011\071\012\027\013\030" +
    "\014\031\001\001\000\002\001\001\000\006\005\075\006" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\101\012\027\013\030\014\031\001\001\000\002\001\001" +
    "\000\006\005\104\006\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\120\004\022\007\017\001" +
    "\001\000\006\004\051\007\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\124\012\027\013\030\014" +
    "\031\001\001\000\002\001\001\000\010\003\126\004\022" +
    "\007\017\001\001\000\006\004\051\007\017\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		FractalLexer lexer;

		public FractalParser(FractalLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Encountered token " + cur_token +
					": " + lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // empty ::= 
            {
              Object RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("empty",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // number ::= REAL 
            {
              FractalValue RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = FractalValue.make(r); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // number ::= INT 
            {
              FractalValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = FractalValue.make(i); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= LPAREN expression RPAREN 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = e; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= ID 
            {
              ASTExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpVar(v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= number 
            {
              ASTExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		FractalValue ilit = (FractalValue)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(ilit); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= factor 
            {
              ASTExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= term MOD factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpMod(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpDiv(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
		RESULT = new ASTExpMul(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= term 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression MINUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
			RESULT = new ASTExpSub(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression PLUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
			RESULT = new ASTExpAdd(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expList ::= expression 
            {
              ArrayList<ASTExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 ArrayList<ASTExp> list = new ArrayList<ASTExp>();
	    		    list.add(e);
			    RESULT = list;
			 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expList",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expList ::= expList COMMA expression 
            {
              ArrayList<ASTExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ArrayList<ASTExp> l = (ArrayList<ASTExp>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("expList",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // turtleCmd ::= CLEAR LPAREN RPAREN 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdClear();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // turtleCmd ::= HOME LPAREN RPAREN 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdHome();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // turtleCmd ::= PD LPAREN RPAREN 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdPenDown();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // turtleCmd ::= PU LPAREN RPAREN 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdPenUp();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // turtleCmd ::= CLEAR 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdClear();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // turtleCmd ::= HOME 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdHome();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // turtleCmd ::= PD 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdPenDown();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // turtleCmd ::= PU 
            {
              ASTTurtleCmd RESULT =null;
		
	      	   RESULT = new ASTTCmdPenUp();
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // turtleCmd ::= BACK expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdBack(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // turtleCmd ::= FWD expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdForward(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // turtleCmd ::= RIGHT expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdRight(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // turtleCmd ::= LEFT expression 
            {
              ASTTurtleCmd RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
	      	   RESULT = new ASTTCmdLeft(e);
	      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fracvar ::= ID 
            {
              ASTFracExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTFracVar(id); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracvar",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fractal ::= FRACTAL LPAREN expression RPAREN COLON stmtList END 
            {
              ASTFractal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence l = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		
                RESULT = new ASTFractal(l.getSeq(), n); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractal",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-6)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= turtleCmd 
            {
              ASTStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTurtleCmd c = (ASTTurtleCmd)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= REP expression COLON stmtList END 
            {
              ASTStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence body = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		
				 RESULT = new ASTRepeat(null, n, body);
			 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= REP LBRACE ID RBRACE expression COLON stmtList END 
            {
              ASTStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence body = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		
        RESULT = new ASTRepeat(id, n, body);
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= SELF 
            {
              ASTStatement RESULT =null;
		
        RESULT = new ASTSelf(null);
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= DEF ID fractal 
            {
              ASTStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal f = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
        RESULT = new ASTDefine(id, f);
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= RESTORE 
            {
              ASTStatement RESULT =null;
		
        RESULT = new ASTRestoreStmt();
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= SAVE 
            {
              ASTStatement RESULT =null;
		
        RESULT = new ASTSaveStmt();
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= RENDER LBRACE expression RBRACE LPAREN expression RPAREN fracvar 
            {
              ASTStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp r = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
				RESULT = new ASTRender(n, r, f);
			
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= RENDER LBRACE expression RBRACE LPAREN expression RPAREN fractal 
            {
              ASTStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).right;
		ASTExp n = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp r = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal f = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
        RESULT = new ASTRender(n, r, f);
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-7)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= RENDER LPAREN expression RPAREN fracvar 
            {
              ASTStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp r = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
         RESULT = new ASTRender(null, r, f);
       
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= RENDER LPAREN expression RPAREN fractal 
            {
              ASTStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp r = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal f = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
        RESULT = new ASTRender(null, r, f);
      
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtSequence(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence l = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = l.add(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence l = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(l); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

